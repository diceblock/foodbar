 
@mixin respond-to($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($breakpoints, $breakpoint);

     @media (min-width: $value) {
      @content;
    }
  }

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}

@mixin line-height($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      line-height: $fs-font-size *1.2;
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        line-height: $fs-font-size*1.2;
      }
    }
  }
}
/* This mixin  simutaneously set the column width for every breakpoint
$xs, $sm, $md, $lg are positive integers between 1 and 12
use a negative number to bypass a breakpoint*/
@mixin column( $xs, $sm, $md, $lg){
  @if $xs > 0 {
  @include make-xs-column($xs);
  @if $sm >0 {
	    @include make-sm-column($sm);
	 }
  @if $md >0{
		     @include make-md-column($md);
			 }
  @if $lg >0 {
	    @include make-lg-column($lg);
	 }
  }
  @else {
     @if $sm >0 {
	    @include make-sm-column($sm);
		@if $md >0{
		     @include make-md-column($md);
			 }
        @if $lg >0 {
	    @include make-lg-column($lg);
	    }
	 }
      @else{
	      @if $md >0{
		     @include make-md-column($md);
			 @if $lg >0 {
	         @include make-lg-column($lg);
	         }
		  }
          @else{
		        @if $lg >0{
                @include make-lg-column($lg);
	            } 
               }
      }
   }
}

//CSS transition//
@mixin transition-property($property){
    transition-property: $property;
	-webkit-transition-property: $property;
	-moz-transition-property: $property;
	-o-transition-property: $property;
}
@mixin transition-duration($time){
     transition-duration: $time;
	-webkit-transition-duration: $time;
	-moz-transition-duration: $time;
	-o-transition-duration: $time;
}
@mixin box-shadow($property){
       box-shadow: $property;
	   -webkit-box-shadow: $property;
	   -moz-box-shadow: $property;
	   -o-box-shadow: $property;
}	